/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package scalev1

import (
	"context"
	"fmt"

	"github.com/lilic/client-go-instrumented/metrics"
	v1 "k8s.io/api/autoscaling/v1"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	av1 "k8s.io/client-go/kubernetes/typed/autoscaling/v1"
)

// HorizontalPodAutoscalersGetter has a method to return a HorizontalPodAutoscalerInterface.
// A group's client should implement this interface.
type HorizontalPodAutoscalersGetter interface {
	HorizontalPodAutoscalers(namespace string) HorizontalPodAutoscalerInterface
}

// HorizontalPodAutoscalerInterface has methods to work with HorizontalPodAutoscaler resources.
type HorizontalPodAutoscalerInterface interface {
	Create(ctx context.Context, horizontalPodAutoscaler *v1.HorizontalPodAutoscaler, opts metav1.CreateOptions) (*v1.HorizontalPodAutoscaler, error)
	Update(ctx context.Context, horizontalPodAutoscaler *v1.HorizontalPodAutoscaler, opts metav1.UpdateOptions) (*v1.HorizontalPodAutoscaler, error)
	UpdateStatus(ctx context.Context, horizontalPodAutoscaler *v1.HorizontalPodAutoscaler, opts metav1.UpdateOptions) (*v1.HorizontalPodAutoscaler, error)
	Delete(ctx context.Context, name string, opts *metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts *metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.HorizontalPodAutoscaler, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.HorizontalPodAutoscalerList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.HorizontalPodAutoscaler, err error)
}

// horizontalPodAutoscalers implements HorizontalPodAutoscalerInterface
type horizontalPodAutoscalers struct {
	hpa     av1.AutoscalingV1Interface
	ns      string
	metrics *metrics.ClientMetrics
}

// newHorizontalPodAutoscalers returns a HorizontalPodAutoscalers
func NewHorizontalPodAutoscalers(namespace string, hpaclient av1.AutoscalingV1Interface, m *metrics.ClientMetrics) *horizontalPodAutoscalers {
	return &horizontalPodAutoscalers{
		hpa:     hpaclient,
		ns:      namespace,
		metrics: m,
	}
}

// Get takes name of the horizontalPodAutoscaler, and returns the corresponding horizontalPodAutoscaler object, and an error if there is any.
func (c *horizontalPodAutoscalers) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.HorizontalPodAutoscaler, err error) {
	result, err = c.hpa.HorizontalPodAutoscalers(c.ns).Get(ctx, name, options)
	if err != nil {
		code := getStatusCode(err)
		c.metrics.ClientMetricErrors.WithLabelValues("hpa", "get", name, c.ns, code).Inc()
		return
	}
	c.metrics.ClientMetricSuccess.WithLabelValues("hpa", "get", result.Name, result.Namespace).Inc()
	return
}

// List takes label and field selectors, and returns the list of HorizontalPodAutoscalers that match those selectors.
func (c *horizontalPodAutoscalers) List(ctx context.Context, opts metav1.ListOptions) (result *v1.HorizontalPodAutoscalerList, err error) {
	result, err = c.hpa.HorizontalPodAutoscalers(c.ns).List(ctx, opts)
	if err != nil {
		code := getStatusCode(err)
		c.metrics.ClientMetricErrors.WithLabelValues("hpa", "list", "", c.ns, code).Inc()
		return
	}
	c.metrics.ClientMetricSuccess.WithLabelValues("hpa", "list", "", c.ns).Inc()
	return
}

// Watch returns a watch.Interface that watches the requested horizontalPodAutoscalers.
func (c *horizontalPodAutoscalers) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	watch, err := c.hpa.HorizontalPodAutoscalers(c.ns).Watch(ctx, opts)
	if err != nil {
		code := getStatusCode(err)
		c.metrics.ClientMetricErrors.WithLabelValues("hpa", "watch", "", c.ns, code).Inc()
		return watch, err
	}
	c.metrics.ClientMetricSuccess.WithLabelValues("hpa", "watch", "", c.ns).Inc()
	return watch, err
}

// Create takes the representation of a horizontalPodAutoscaler and creates it.  Returns the server's representation of the horizontalPodAutoscaler, and an error, if there is any.
func (c *horizontalPodAutoscalers) Create(ctx context.Context, horizontalPodAutoscaler *v1.HorizontalPodAutoscaler, opts metav1.CreateOptions) (result *v1.HorizontalPodAutoscaler, err error) {
	result, err = c.hpa.HorizontalPodAutoscalers(c.ns).Create(ctx, horizontalPodAutoscaler, opts)
	if err != nil {
		code := getStatusCode(err)
		c.metrics.ClientMetricErrors.WithLabelValues("hpa", "create", horizontalPodAutoscaler.Name, c.ns, code).Inc()
		return
	}
	c.metrics.ClientMetricSuccess.WithLabelValues("hpa", "create", result.Name, result.Namespace).Inc()
	return
}

// Update takes the representation of a horizontalPodAutoscaler and updates it. Returns the server's representation of the horizontalPodAutoscaler, and an error, if there is any.
func (c *horizontalPodAutoscalers) Update(ctx context.Context, horizontalPodAutoscaler *v1.HorizontalPodAutoscaler, opts metav1.UpdateOptions) (result *v1.HorizontalPodAutoscaler, err error) {
	result, err = c.hpa.HorizontalPodAutoscalers(c.ns).Update(ctx, horizontalPodAutoscaler, opts)
	if err != nil {
		code := getStatusCode(err)
		c.metrics.ClientMetricErrors.WithLabelValues("hpa", "update", horizontalPodAutoscaler.Name, c.ns, code).Inc()
		return
	}
	c.metrics.ClientMetricSuccess.WithLabelValues("hpa", "update", result.Name, result.Namespace).Inc()
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *horizontalPodAutoscalers) UpdateStatus(ctx context.Context, horizontalPodAutoscaler *v1.HorizontalPodAutoscaler, opts metav1.UpdateOptions) (result *v1.HorizontalPodAutoscaler, err error) {
	result, err = c.hpa.HorizontalPodAutoscalers(c.ns).UpdateStatus(ctx, horizontalPodAutoscaler, opts)
	if err != nil {
		code := getStatusCode(err)
		c.metrics.ClientMetricErrors.WithLabelValues("hpa", "updatestatus", horizontalPodAutoscaler.Name, c.ns, code).Inc()
		return
	}
	c.metrics.ClientMetricSuccess.WithLabelValues("hpa", "updatestatus", result.Name, result.Namespace).Inc()
	return
}

// Delete takes name of the horizontalPodAutoscaler and deletes it. Returns an error if one occurs.
func (c *horizontalPodAutoscalers) Delete(ctx context.Context, name string, options *metav1.DeleteOptions) error {
	err := c.hpa.HorizontalPodAutoscalers(c.ns).Delete(ctx, name, options)
	if err != nil {
		code := getStatusCode(err)
		c.metrics.ClientMetricErrors.WithLabelValues("hpa", "delete", name, c.ns, code).Inc()
		return err
	}
	c.metrics.ClientMetricSuccess.WithLabelValues("hpa", "delete", name, c.ns).Inc()
	return nil
}

// DeleteCollection deletes a collection of objects.
func (c *horizontalPodAutoscalers) DeleteCollection(ctx context.Context, options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	err := c.hpa.HorizontalPodAutoscalers(c.ns).DeleteCollection(ctx, options, listOptions)
	if err != nil {
		code := getStatusCode(err)
		c.metrics.ClientMetricErrors.WithLabelValues("hpa", "deletecollection", "", c.ns, code).Inc()
		return err
	}
	c.metrics.ClientMetricSuccess.WithLabelValues("hpa", "deletecollection", "", c.ns).Inc()
	return nil
}

// Patch applies the patch and returns the patched horizontalPodAutoscaler.
func (c *horizontalPodAutoscalers) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.HorizontalPodAutoscaler, err error) {
	result, err = c.hpa.HorizontalPodAutoscalers(c.ns).Patch(ctx, name, pt, data, opts, subresources...)
	if err != nil {
		code := getStatusCode(err)
		c.metrics.ClientMetricErrors.WithLabelValues("hpa", "patch", name, c.ns, code).Inc()
		return
	}
	c.metrics.ClientMetricSuccess.WithLabelValues("hpa", "patch", name, c.ns).Inc()
	return
}

func getStatusCode(err error) string {
	code := ""
	switch t := err.(type) {
	case apierrors.APIStatus:
		c := t.Status().Code
		code = fmt.Sprintf("%d", c)
	}
	return code
}
